{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst data = {\n  input: document.querySelector('#datetime-picker'),\n  btnStart: document.querySelector('button[data-start]'),\n  days: document.querySelector('span[data-days]'),\n  hours: document.querySelector('span[data-hours]'),\n  minutes: document.querySelector('span[data-minutes]'),\n  seconds: document.querySelector('span[data-seconds]'),\n};\n\nlet intervalId = null;\ndata.btnStart.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n\n    if (selectedDates[0] < new Date()) {\n        iziToast.show({\n            message: 'Please, choose a date in the future!',\n            backgroundColor: 'red',\n            messageColor: 'white',\n            position: 'topRight',\n     })\n      return;\n    }\n    if (selectedDates[0] > new Date()) {\n      data.btnStart.disabled = false;\n    }\n\n    data.btnStart.addEventListener('click', () => {\n      intervalId = setInterval(() => {\n        const counter = selectedDates[0] - new Date();\n\n        if (counter < 1000) {\n          clearInterval(intervalId);\n        }\n        const result = convertMs(counter);\n        viewOfTimer(result);\n      }, 1000);\n    });\n  },\n};\n\nflatpickr(data.input, options);\n\nfunction viewOfTimer({ days, hours, minutes, seconds }) {\n  data.days.textContent = `${days}`;\n  data.hours.textContent = `${hours}`;\n  data.minutes.textContent = `${minutes}`;\n  data.seconds.textContent = `${seconds}`;\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = addLeadingZero(Math.floor(ms / day));\n  const hours = addLeadingZero(Math.floor((ms % day) / hour));\n  const minutes = addLeadingZero(Math.floor(((ms % day) % hour) / minute));\n  const seconds = addLeadingZero(Math.floor((((ms % day) % hour) % minute) / second));\n\n  return { days, hours, minutes, seconds };\n}"],"names":["data","intervalId","options","selectedDates","iziToast","counter","result","convertMs","viewOfTimer","flatpickr","days","hours","minutes","seconds","addLeadingZero","value","ms"],"mappings":"2GAKA,MAAMA,EAAO,CACX,MAAO,SAAS,cAAc,kBAAkB,EAChD,SAAU,SAAS,cAAc,oBAAoB,EACrD,KAAM,SAAS,cAAc,iBAAiB,EAC9C,MAAO,SAAS,cAAc,kBAAkB,EAChD,QAAS,SAAS,cAAc,oBAAoB,EACpD,QAAS,SAAS,cAAc,oBAAoB,CACtD,EAEA,IAAIC,EAAa,KACjBD,EAAK,SAAS,SAAW,GAEzB,MAAME,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAGrB,GAFA,QAAQ,IAAIA,EAAc,CAAC,CAAC,EAExBA,EAAc,CAAC,EAAI,IAAI,KAAQ,CAC/BC,EAAS,KAAK,CACV,QAAS,uCACT,gBAAiB,MACjB,aAAc,QACd,SAAU,UACtB,CAAM,EACA,MACD,CACGD,EAAc,CAAC,EAAI,IAAI,OACzBH,EAAK,SAAS,SAAW,IAG3BA,EAAK,SAAS,iBAAiB,QAAS,IAAM,CAC5CC,EAAa,YAAY,IAAM,CAC7B,MAAMI,EAAUF,EAAc,CAAC,EAAI,IAAI,KAEnCE,EAAU,KACZ,cAAcJ,CAAU,EAE1B,MAAMK,EAASC,EAAUF,CAAO,EAChCG,EAAYF,CAAM,CACnB,EAAE,GAAI,CACb,CAAK,CACF,CACH,EAEAG,EAAUT,EAAK,MAAOE,CAAO,EAE7B,SAASM,EAAY,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACtDb,EAAK,KAAK,YAAc,GAAGU,CAAI,GAC/BV,EAAK,MAAM,YAAc,GAAGW,CAAK,GACjCX,EAAK,QAAQ,YAAc,GAAGY,CAAO,GACrCZ,EAAK,QAAQ,YAAc,GAAGa,CAAO,EACvC,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASR,EAAUS,EAAI,CAOrB,MAAMN,EAAOI,EAAe,KAAK,MAAME,EAAK,KAAG,CAAC,EAC1CL,EAAQG,EAAe,KAAK,MAAOE,EAAK,MAAO,IAAI,CAAC,EACpDJ,EAAUE,EAAe,KAAK,MAAQE,EAAK,MAAO,KAAQ,GAAM,CAAC,EACjEH,EAAUC,EAAe,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,CAAC,EAElF,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}